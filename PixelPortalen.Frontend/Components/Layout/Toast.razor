@implements IDisposable
@using PixelPortalen.Frontend.Services
@inject ToastService ToastService

@if (_toasts.Any())
{
    <div class="toast-container">
        @foreach (var toast in _toasts)
        {
            <div class="custom-toast visible">
                @toast.Message
            </div>
        }
    </div>
}

@code {
    private List<ToastItem> _toasts = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private async void ShowToast(string message)
    {
        var toast = new ToastItem { Message = message };
        _toasts.Add(toast);
        StateHasChanged();

        await Task.Delay(2500);

        _toasts.Remove(toast);
        StateHasChanged();
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
    }

    private class ToastItem
    {
        public string Message { get; set; }
    }
}